<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  intro.xml            Utils documentation            Chris Wensley  -->
<!--                                                                     -->
<!--  version 0.13, 14/12/2015                                           --> 
<!--                                                                     --> 
<!--  Copyright (C) 2015, The GAP Group,                                 --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?> 

<Chapter Label="chap-intro">

<Heading>Introduction</Heading>

The &utils; package provides a space for utility functions from a variety 
of &GAP; packages to be collected together into a single package. 
In this way it is hoped that they will become more visible 
to other package authors. 
Any package author who transfers a function to &utils; will become 
an author of &utils;. 
<P/> 
The package is loaded with the command
<Example>
<![CDATA[
gap> LoadPackage( "utils" ); 
]]>
</Example>
<P/>
The current version is &VERSION; for &GAP; 4.8, released on &LONGRELEASEDATE;. 
<P/> 
The package may be obtained as a compressed tar file 
<File>&TARFILENAME;</File>
by ftp from one of the following sites: 
<List>
<Item>
any &GAP; archive, e.g. 
<URL>http://www.gap-system.org/Packages/packages.html</URL>; 
</Item>
<Item>
the Bangor site: 
<URL>http://www.maths.bangor.ac.uk/chda/&HTMLFILENAME;</URL>;
</Item>
</List> 
The package also has a GitHub repository: 
<URL>https://github.com/gap-packages/utils</URL>. 
<P/> 
Once the package is loaded, the manual <Code>doc/manual.pdf</Code> 
can be found in the documentation folder. 
The <Code>html</Code> versions, with or without MathJax, 
may be rebuilt as follows: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "makedocrel.g" ); 
]]>
</Example>
<P/>
It is possible to check that the package has been installed correctly
by running the test files: 
<P/>
<Example>
<![CDATA[
gap> ReadPackage( "utils", "tst/testall.g" );
#I  Testing .../pkg/utils/tst/lists.tst 
... 
]]>
</Example>
<P/>
Additional information can be found on the
<E>Computational Higher-dimensional Discrete Algebra</E> website at
<URL>http://pages.bangor.ac.uk/~mas023/chda/</URL>. 


<Section Label="sect-procedure"> 
<Heading>The transfer procedure</Heading>

The process for transferring utility functions from an existing package 
(the <Package>Home</Package> package, say) to <Package>Utils</Package> 
should only require the following steps from <Package>Home</Package>'s 
author(s). 
<List>
<Item>
Offer functions for inclusion. 
This may be simply done by emailing a list of functions. 
More usefully, email the following files: <File>home.gd</File>, 
<File>home.gi</File>, <File>home.tst</File> and <File>home.xml</File>, 
</Item>
<Item>
Once the functions have been included in <Package>Utils</Package>, 
and a new version of <Package>Utils</Package> released, 
remove the functions from <Package>Home</Package>, and add 
<Package>Utils</Package> to the list of required packages 
in <File>PackageInfo.g</File>. 
</Item>
</List>  

<E>The following procedure is suggested for transferring a function</E> 
<C>func</C> <E>from <Package>Home</Package> to <Package>Utils</Package>.</E>
<P/> 
There are two cases to consider. 
If the functions being transferred have names of the form <C>Home_this_func</C>, 
then it is probably sensible to change the name in <Package>Utils</Package> 
to <C>ThisFunc</C>. 
In this case there is no duplication of declarations or implementations. 
However, once the functions have appeared in a new release of 
<Package>Utils</Package>, the author(s) of <Package>Home</Package> will 
have a significant amount of editing to do. 
<P/> 

In the second case, the functions names in <Package>Utils</Package> 
will be the same as in <Package>Home</Package>, and the following steps 
are proposed. 
<P/>
<List> 
<Item> 
For each function <C>func</C> copy the code into the appropriate 
<File>*.gd, *.gi</File> files in <Package>Utils</Package>. 
<P/>
For attributes and properties this duplication produces no obvious effect 
in &GAP;.  
<P/>
For operations the following warning is printed when the second of 
<Package>Home</Package> or <Package>Utils</Package> is loaded: 
<Listing>
#I  equal requirements in multiple declarations for operation `func'. 
</Listing>
<P/>
For a global function <C>glob</C> duplicate declarations produce an error. 
This is avoided as follows. 
<List>
<Item>
The library file <File>oper.g</File> has been modified to include 
the declaration of empty lists UTILS_FUNCTION_NAMES, UTILS_FUNCTION_OPERS 
and UTILS_FUNCTION_COUNT. 
Also, in <File>oper.g</File>, the functions <C>DeclareGlobalFunction</C> and 
<C>InstallGlobalFunction</C> have been modified to prevent the execution 
of a second declaration or installation of functions in these lists. 
The revised code in <File>oper.g</File> 
is shown in Appendix <Ref Chap="appendix" />. 
</Item> 
<Item>
Now "<C>glob</C>" is added to the list <C>UTILS_FUNCTION_NAMES</C> 
in <File>utils/lib/first.gd</File> and <C>glob</C> is added to the list 
<C>UTILS_FUNCTION_OPERS</C> in <File>utils/lib/last.gd</File>. 
</Item>
</List> 
</Item> 
<Item>
Copy and edit any tests and documentation into the corresponding 
<File>*.tst, *.xml</File> files in <Package>Utils</Package>. 
</Item>
<Item>
When all is working satisfactorily, publish a new version of 
<Package>Utils</Package>; then notify the author(s) of <Package>Home</Package>, 
asking them to check that the functions are working correctly. 
These checks should involve loading <Package>Utils</Package> first, 
and then <Package>Home</Package>, and, in a separate &GAP; session, 
loading <Package>Home</Package> first, and then <Package>Utils</Package>. 
</Item> 
<Item>
The author(s) of <Package>Home</Package> remove the declarations 
and implementations of all the transferred functions from their files, 
and (possibly) edit references to them in their manual and tests.  
</Item>
<Item>
They make <Package>Utils</Package> a required package in 
<File>PackageInfo.g</File> and publish a new release of 
<Package>Home</Package>. 
</Item>
<Item>
In the next version of <Package>Utils</Package> 
remove each "<C>glob</C>" from <C>UTILS_FUNCTION_NAMES</C> 
and each <C>glob</C> from <C>UTILS_FUNCTION_OPERS</C>. 
</Item>
</List>

</Section>

<Section Label="sect-comments"> 
<Heading>Comments on the transfer procedure for global functions</Heading>

Suppose that, at the start of the transfer of <C>glob</C> 
from <Package>Home</Package> to <Package>Utils</Package>, 
the version of <Package>Home</Package> is <C>6.78</C> and 
the version of <Package>Utils</Package> is <C>2.34</C>. 
In what follows, <C>val</C> refers to the value of 
<C>UTILS_FUNCTION_COUNT[pos]</C> where <C>pos</C> is the position of 
"<C>glob</C>" in <C>UTILS_FUNCTION_NAMES</C>. 
<P/> 
There are three stages to the process. 
<P/> 
In the first stage the declaration, implementation, documentation and tests 
referring to <C>glob</C> are copied to files in <Package>Utils</Package>. 
Suppose <Package>Home</Package> is loaded first, so that <C>glob</C> 
is both declared and implemented from <Package>Home</Package>. 
Then, when <Package>Utils</Package> is loaded, 
<List>
<Item>
<C>ISBOUND_GLOBAL</C> will be true for <C>glob</C> 
and so <C>val</C> will be set to <M>1</M> by <File>first.gd</File>; 
</Item> 
<Item> 
the declaration of <C>glob</C> is then found, and ignored, 
but <C>val</C> is increased to <M>2</M>; 
</Item> 
<Item> 
when the implementation of <C>glob</C> is found, it is ignored because 
<C>val</C> is too large. 
</Item>
</List> 

Alternatively, suppose <Package>Utils</Package> is loaded first, so that: 
<List>
<Item>
<C>ISBOUND_GLOBAL</C> will be false for <C>glob</C> 
and so <C>val</C> will be set to <M>0</M> by <File>first.gd</File>; 
</Item> 
<Item> 
the declaration of <C>glob</C> is then accepted
and <C>val</C> is increased to <M>1</M>; 
</Item> 
<Item> 
when the implementation of <C>glob</C> is found, it is accepted because 
<C>val</C> is less than <M>2</M>.
</Item>
</List> 
Then, when <Package>Home</Package> is loaded, 
<List>
<Item> 
the declaration of <C>glob</C> is found, and ignored, 
and <C>val</C> is increased to <M>2</M>; 
</Item> 
<Item> 
when the implementation of <C>glob</C> is found, it is ignored because 
<C>val</C> is too large. 
</Item>
</List> 
When all the tests pass, version <C>2.35</C> of <Package>Utils</Package> 
is published, and the authors of <Package>Home</Package> notified. 
<P/> 
In the second stage, the authors of <Package>Home</Package> do their own tests. 
If satisfied, they remove all declaration and implementation code 
for <C>glob</C> from <Package>Home</Package>, and add <Package>Utils</Package> 
to their list of required packages in their <File>PackageInfo.g</File>. 
Now, in a new &GAP; session, when <C>RequirePackage(home);</C> is called, 
<Package>Utils</Package> is loaded first, providing the declaration 
and implementation of <C>glob</C>. 
Further tests are then required to check that any other 
<Package>Home</Package> functions which use <C>glob</C> still work correctly. 
If still satisfied, the authors publish version <C>6.79</C> 
of <Package>Home</Package>.
<P/> 
In the final stage, "<C>glob</C>" and <C>glob</C> are removed from 
<C>UTILS_FUNCTION_NAMES</C> and <C>UTILS_FUNCTION_OPERS</C> respectively. 
The additional code in <File>oper.g</File> no longer applies to <C>glob</C>, 
and version <C>2.36</C> of <Package>Utils</Package> may be published. 

</Section> 

</Chapter>
